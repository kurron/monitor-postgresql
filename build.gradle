/*
 * Copyright (c) 2015. Ronald D. Kurr kurr@jvmguy.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath("io.spring.gradle:dependency-management-plugin:${dependencyPluginVersion}")
    }
}

description = 'Bare bones example REST micro-service'
group = 'org.kurron.example'

ext.coverageExcludes = []

apply plugin: 'build-announcements'

apply from: "$rootDir/gradle/repositories.gradle"
apply from: "$rootDir/gradle/version.gradle"
apply from: "$rootDir/gradle/groovy.gradle"
apply from: "$rootDir/gradle/boot.gradle"
apply from: "$rootDir/gradle/maven-publish.gradle"
apply from: "$rootDir/gradle/spock.gradle"
apply from: "$rootDir/gradle/dependency-exclusions.gradle"
apply from: "$rootDir/gradle/conflicts.gradle"

dependencies {
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}:indy"
    compile "org.codehaus.gpars:gpars:${gparsVersion}"
    compile "org.kurron:tools-groovy:${toolsGroovyVersion}"

    runtime "mysql:mysql-connector-java:${mySqlDriverVersion}"
}

defaultTasks << 'clean'
defaultTasks << 'build'

if ( 'true' == runIntegrationTests ) {
    defaultTasks += ['outboundIntegrationTests', 'inboundIntegrationTests', 'acceptanceTests','updateJarWithApiDocumentation']
    // make sure we deploy the docker container before running integration/acceptance tests
    [acceptanceTests]*.dependsOn runDockerContainer
    // make sure the docker image is cleaned up
    [acceptanceTests]*.finalizedBy deleteDockerImage
}

// only publish artifacts if publishArtifacts is true, and the branch is either master or development
if ( 'true' == publishArtifacts && branch in ['master', 'development'] ) {
    defaultTasks << 'publish'
    defaultTasks << 'publishDockerImage'
    // ensures that deleteDockerImage will not be executed until we publish, unless a failure occurs prior to publishing
    publishDockerImage.finalizedBy deleteDockerImage
}
else {
    defaultTasks << 'publishToMavenLocal'
}

